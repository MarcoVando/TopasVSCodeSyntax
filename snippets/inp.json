{
  "New site posistion": {
  "prefix": "site",
  "body": "site  ${1:C} x  @ 1 y  @ 1 z  @ 1 occ ${1:C} 1 beq=B+2; num_posns  24",
  "description": "New site posistion",
  "scope": "source.scheme"
  },
  "New Z-matrix": {
    "prefix": "rigid z_matrix",
    "body": [
      "rigid",
      " load z_matrix { 'comment",
      " <reference atom>",
      " <2nd atom> <ref atom> <dist>",
      " <3rd atom>  <2nd atom>  <dist>   <ref atom> <angle>",
      " <4th atom>  <3rd atom>  <dist>;   <2nd atom>  <angle>;  <ref atom>   <dihedral angle>",
      "} ",
      "'or the following",
      "rigid ",
      " z_matrix <reference atom>",
      "       z_matrix   <2nd atom>  <ref atom>   <dist>",
      " z_matrix   <3rd atom>  <2nd atom>  <dist>   <ref atom> <angle>",
      " z_matrix   <4th atom>  <3rd atom>  <dist>;   <2nd atom>  <angle>;  <ref atom>   <dihedral angle>"
    ],
    "description": "New rigid body z_matrix",
    "scope": "source.scheme"
  },
  "New Instrumental parameter": {
    "prefix": "instrument D8 Gobel",
    "body": [
      "LP_Factor( 0)",
      "Rp 250",
      "Rs 250",
      "lpsd_th2_angular_range_degrees  2.82",
      "lpsd_equitorial_divergence_degrees  0.1",
      "lpsd_equitorial_sample_length_mm  10",
      "Tube_Tails(, 0.24969,, -4.22686,, 3.78826,, 0.00054)",
      "Simple_Axial_Model(@, 7.39750`)  'should be near 8, refine only at the last cycle",
      "lam",
      " ymin_on_ymax  0.0001",
      " la  0.0159 lo  1.534753 lh  3.6854",
      " la  0.5791 lo  1.540596 lh  0.437",
      " la  0.0762 lo  1.541058 lh  0.6",
      " la  0.2417 lo  1.54441 lh  0.52",
      " la  0.0871 lo  1.544721 lh  0.62"
    ],
    "description": "New Instrumental parameter",
    "scope": "source.scheme"
  },
  "New hkl phase": {
  "prefix": ["load hkl", "Le Bail","Pawley"],
  "body": [
    "Le Bail 1    '0 for Pawley",
    "",
    "load hkl_m_d_th2 I {",
    "}",
    ""
  ],
  "description": "Le Bail Fitting"
  },
  "Simulated Annhelaing": {
  "prefix": "macro new SA",
  "body": [
    " Auto_T(10)  'put the command at the top of the inp file",
    "",
    "   prm B  0.10000`_LIMIT_MIN_0.1 min 0.1 max 10",
    "   site <name>     x <x>    y <y>    z   <z>   occ <varName> <value> beq <value or prm or eqn>     num_posns  <auto_value>",
    "   rigid ",
    "       z_matrix <reference atom>",
    "       z_matrix   <2nd atom>  <ref atom>   <dist>",
    "       z_matrix   <3rd atom>  <2nd atom>  <dist>   <ref atom> <angle>",
    "       z_matrix   <4th atom>  <3rd atom>  <dist>;   <2nd atom>  <angle>;  <ref atom>   <dihedral angle>",
    "",
    "       Translate(0, 0, 0)'*****************************************************************************",
    "   Out_CIF_STR(<filename>.cif)"
  ],
  "description": "Simulated Annhelaing"
  },
  "Ritveld Refinment": {
  "prefix": "macro new RF",
  "body": [
    "   prm B  0.10000`_LIMIT_MIN_0.1 min 0.1 max 10",
    "   site <name>     x <x>    y <y>    z   <z>   occ <varName> <value> beq <value or prm or eqn>     num_posns  <auto_value>",
    "   rigid ",
    "       z_matrix <reference atom>",
    "       z_matrix   <2nd atom>  <ref atom>   <dist>",
    "       z_matrix   <3rd atom>  <2nd atom>  <dist>   <ref atom> <angle>",
    "       z_matrix   <4th atom>  <3rd atom>  <dist>;   <2nd atom>  <angle>;  <ref atom>   <dihedral angle>",
    "",
    "       Translate(0, 0, 0)'*****************************************************************************",
    "   Out_CIF_STR(<filename>.cif)"
  ],
  "description": "Ritveld Refinment"
  },
  "Multi INP Macro": {
  "prefix": "macro multi INP",
  "body": [
    "'### General parameters",
    "",
    "",
    "'#### Common parameters to all files",
    "",
    "",
    "'#### Listing paramenters",
    "#define savebest 'define savebest function later declared",
    "#ifdef !topas_old_version 'i.e. use v6 as you haven't been told it's an old version of topas",
    "Backup_INP",
    "out_file = Concat(String(INP_File), \".INP\"); 'define outfile's name, if you put .inp as extension the script generate the ready-to-go inp files to run separately each run. Remeber only to change the #list declaration keeping only the right parameters for the selected file",
    "num_runs <num_runs>   #should be the same or minor to the number of files u want to process",
    "#list File_Name samplename Temperature {   'list of the file path samplenames and all the parameter u want. U can add as many parameter as u want in list declaration. Remeber that each lines inside {} should contain the same number of parameter declared in #list ",
    "",
    "<filename.xy> <sample_name> <T>   ",
    "}",
    "",
    "macro filename { File_Name(Run_Number)} 'extract the filenames for each run",
    "",
    "for the extraction of the sample_name u can either define a prm or define a macro. The macro can be used after the phase_name keyword as it return a string value, prm won't be accepted",
	  "prm sname = samplename(Run_Number);  'define a samplename parameter",
	  "macro SName {samplename(Run_Number) }  'extract the samplename'",
	  "macro OutInp(name) = {name##.inp }   'get an inp file output different for each run'",
    "prm !te =Temperature(Run_Number); 'define a temperature parameter",
    "",
    "'macro to copy original inp over the refined one after every run. Avoid degenerated reuslts?'",
	  "macro Restart(numruns) = {",
		" 'saves a backup of the original input file'",
		" #if Run_Number == 0;",
		"   system_before_save_OUT { copy INPFILE##.inp INPFILE##.backup }",
		" #endif",  
		" 'copies the backup back over the final input file at the end of the run so you can restart from where you started, comment this piece of code to start the next run from the refined values of the previous run",
		" #if Run_Number == numruns-1;",
		"   system_after_save_OUT { copy INPFILE##.backup INPFILE##.inp }",
		" #endif  ",
	  "}",
	  "Restart(2) 'comment this if u want the parameters in the file to be updated before starting the new run",
    "",
    "#endif 'endif of the original !topas_old_version",
    "",
    "'##### Body of the inp",
    "' Use the following lines in your inp body to use the values decalred in list function ",
    "xdd filename   'substitute filename in list here. By this way u can cycle over multiple patterns",
    "phase_name SName",
    "",
    "####### Output functions definition ",
    "",
    "declaration of savebest",
    "#ifdef savebest",
	  "   file_name_for_best_solutions OutInp(SName)  'comment this if u don't want separated inp files for each run",
	  "   out_prm_vals_on_convergence OutRefPrms(SName)",
	  "   out_prm_vals_filter \"* !bkg*\"   'export refined parameters , avoid bkg parameters",
    "#endif",
    "'write column labels in the output files.",
    "#if Run_Number == 0;",
    "   system_before_save_OUT  { del \"results.txt\" }",
	  "   out \"results.txt\" append",
	  "   Out_String(\"Named \t Rwp \t Cryst Size G \t axis\n\")",
    "#endif",
    "",
    "'append values to the output file",
    "#define write_out",
    "#ifdef write_out",
    "   out \"results.txt\" append",
    "   Out(SName, \"%s\t\")",
    "'  Out(sname, \"%s\t\") 'exporting the parameter",
    "   Out(Get (r_wp), \"\t %11.5f\t\")",
    "   Out(csg, \" %11.5f\t\")",
    "   Out(ax, \" %11.5f\t\")",
    "   Out_String(\n)",
    "#endif"
  ],
  "description": "Multi INP Macro"
  },
  "Export plots and ticks": {
  "prefix": ["export", "plot", "ticks"],
  "body": [
    "<name_macro>(\"file.txt\")",
    "macro Rietveld_Plot(filename){",
    "   xdd_out filename load out_record out_fmt out_eqn{",
    "      \" %11.5f  \" = X;",
    "      \" %11.5f  \" = Yobs;",
    "      \" %11.5f  \" = Ycalc;",
    "      \" %11.5f\n\" = Yobs-Ycalc;",
    "   }", 
    "}",
    "'The macro below will output tic marks to a file. The top macro just creates an xy file with points at y = 0, the second lets you specify the y value.",
    "macro Rietveld_Tics_2th(filename) { Rietveld_Tics_2th(filename,0) }",
    "macro Rietveld_Tics_2th(filename,yposn){",
    "   phase_out filename load out_record out_fmt out_eqn{",
    "      \"%14.5f\" = 2* ArcSin(Lam/(2*D_spacing)) * (360/(2*Pi));",
    "      \"%9.2f\"  = yposn;",
    "      \" %3.0f\" = H;",
    "      \" %3.0f\" = K;",
    "      \" %3.0f\\n\" = L;",
    "   }",
    "}"
  ],
  "description": "Export Experimenta;, calculated, difference patterns and hkl positions",
  "scope": "source.scheme"
  },
  "Export selected refined parameters": {
  "prefix": ["export", "parameter"],
  "body": [
    "'write column labels in the output files.",
    "#if Run_Number == 0;",
    "   system_before_save_OUT  { del \"results.txt\" }",
	  "   out \"results.txt\" append",
	  "   Out_String(\"Named \t Rwp \t Cryst Size G \t axis\n\")    'here put the labels for your column ",
    "#endif",
    "",
    "'append values to the output file, of course u have to define the prm mentioned below.",
    "#define write_out",
    "#ifdef write_out",
    "   out \"results.txt\" append",
    "   Out(SName, \"%s\t\")",
    "'  Out(sname, \"%s\t\") 'exporting the parameter",
    "   Out(Get (r_wp), \"\t %11.5f\t\")",
    "   Out(csg, \" %11.5f\t\")",
    "   Out(ax, \" %11.5f\t\")",
    "   Out_String(\n)",
    "#endif"
  ],
  "description": "Export the refined parameters after each run.",
  "scope": "source.scheme"
  },
  "Save best solution": {
  "prefix": ["save", "best"],
  "body": [
    "declaration of savebest",
    "#ifdef savebest",
	  "   file_name_for_best_solutions OutInp(SName)  'comment this if u don't want separated inp files for each run",
	  "   out_prm_vals_on_convergence OutRefPrms(SName)",
	  "   out_prm_vals_filter \"* !bkg*\"   'export refined parameters , avoid bkg parameters",
    "#endif"
  ],
  "description": "Save best solution during a randomize on errors procedure and its refined prms",
  "scope": "source.scheme"
  },
  "Export parameters per iter/run": {
  "prefix": ["export", "parameter", "iter", "run"],
  "body": [
    "out_prm_vals_on_convergence <name>",
    "out_prm_vals_per_iteration <name>    'to export at every iter, use this instead",
    "out_prm_vals_filter \"* !bkg*\"    'export all refined parameters, avoid bkg parameters'"
  ],
  "description": "Export Experimental, calculated, difference patterns and hkl positions",
  "scope": "source.scheme"
  },
  "Iters dependent on rwp": {
  "prefix": ["iters", "rwp", "r_wp"],
  "body": [
    "iters = If(Get(r_wp) < 20, 0, 1000000);"
   ],
  "description": "End a refinemnt only when rwp is below a defined value, in this case 20",
  "scope": "source.scheme"
  },
  { label: "Insert Spherical Harmonic", picked: false, description: "Insert codes for spherical harmonics" },
          { label: "Insert Additional peaks", picked: false, description: "Insert codes to manually insert new peaks" },
          { label: "Insert Save best solutions", picked: false, description: "Insert codes to save best solutions during refinement" },
          { label: "Insert Box interactions and Anti Bump", picked: false, description: "Insert codes Anti Bump and box interactions" },
  
}


